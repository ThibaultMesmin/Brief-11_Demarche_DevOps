name: Release

# quand se déclenche la ci
on:
  push:
    branches:
      - main
      
# Donne les permissions nécessaires pour écrire du contenu
permissions:
  contents: write

jobs:
  get-version:
    uses: shiipou/github-actions/.github/workflows/get-version.yml@main
    with:
      release-branches: '^(main)$'
  # Job pour construire le projet
  build:
   name: Build
   runs-on: ubuntu-latest
   if: ${{ needs.get-version.outputs.will-release == 'true' }}
   needs: 
     - get-version

   steps:
      # Clone le dépôt
      - name: Checkout Repository
        uses: actions/checkout@v4
      # Install Rust
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: stable # Utilise la version stable de Rust
          target: wasm32-unknown-unknown #platforme cible (web assembly)
          
      - name: Install Trunk
        uses: jetli/trunk-action@v0.5.0
          
      - name: Build with Cargo
        env:
         VERSION: "${{ needs.get-version.outputs.version }}"
        run: trunk build --release
      - uses: actions/upload-artifact@v4
        with:
         name: Dist
         path: ./dist
          
  # Job pour créer une release
  release:
    name: Release
    runs-on: ubuntu-latest
    # récupère que les sorties du job get-version et build (outputs)
    needs:
      - get-version
      - build
      
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: Dist
          path: ./dist
      - name: Zip File
        run: zip -r assets.zip dit/*
      - name: Create Github Release
        env:
          VERSION: "${{ needs.get-version.outputs.version }}"
          REPO: "${{ github.repository }}"
          COMMIT: "${{ github.sha }}"
          GH_TOKEN: "${{ github.token }}"
        # $REPO = le repo sur lequel on veut que ça se fasse
        # $COMMIT = le commit en rapport au push (prend donc le bon commit et non le dernier effectué)
        # $VERSION = la version récupérée du get-version
        # GH_TOKEN = connu et généré par github
        run: |
          gh release create --repo $REPO --target $COMMIT $VERSION assets.zip
    
    
